import os
from typing import List, Tuple, Union

import numpy as np
import json

from PIL import Image
from tensorflow.keras.preprocessing.image import load_img


def load_acdc(weather_type: str, data_type: str, path: str) -> Tuple[List, List[str]]:
    """
    Load images from the weather_type/data_type folder from the ACDC dataset.

    Example:
        load_acdc('clear', 'train', '.../rgb_anon/')
        returns the list of clear train images and their paths

    Params:
        weather_type: fog or night or rain or snow
        data_type: train or val or test or train_ref or val_ref or test_ref
        path: source path, ends in rgb_anon/

    Returns:
        data: list of images
        data_paths: list of respective paths
    """
    data = []
    data_paths = []
    counter = 0
    path = os.path.join(path, weather_type, data_type)

    # For each Gopro directory, for each image, store the image and its path in train and train_paths respectively
    for directory_name in os.listdir(path):
        gopro_path = os.path.join(path, directory_name)
        for image_name in os.listdir(gopro_path):
            image_path = os.path.join(gopro_path, image_name)
            image = Image.open(image_path)

            # Preprocessing
            image = image.resize((224, 224), Image.ANTIALIAS)
            image = np.array(image, dtype=np.uint8)

            data.append(image)
            data_paths.append(image_path)

            # Counter to see progression
            counter += 1
            if counter % 100 == 0:
                print(str(counter) + " " + data_type + " images loaded")

    return data, data_paths


def load_bdd_labels(labels_path: str) -> Tuple[List]:
    """
    Load labels from the BDD dataset.

    Params:
        labels_path: source path, ends in bdd100k_labels_images_train.json

    Returns:
        names: list of image names
        time_labels: list of respective time labels (1 for night)
        weather_labels: list of respective weather labels
            ([1,0,0] for clear, [0,1,0] for rain, [0,0,1] for snow)
        fog_labels: list of respective fog labels (1 for fog)
    """

    # Open the labels.json file
    with open(labels_path) as json_file:
        label_data = json.load(json_file)

    # image names
    names = []
    # weather ([1,0,0] for clear, [0,1,0] for rainy, [0,0,1] for snowy)
    weather_labels = []
    # fog (currently not saved)
    fog_labels = []
    # time (1 for night, 0 otherwise)
    time_labels = []

    for label in label_data[:]:
        name = label['name']
        weather = label['attributes']['weather']
        time = label['attributes']['timeofday']
        undefined = False

        if weather in ["clear", "partly cloudy", "overcast"]:
            weather_label = [1, 0, 0]
            fog_label = 0
        elif weather == "rainy":
            weather_label = [0, 1, 0]
            fog_label = 0
        elif weather == "snowy":
            weather_label = [0, 0, 1]
            fog_label = 0
        elif weather == "foggy":
            weather_label = [1, 0, 0]
            fog_label = 1
        else:
            undefined = True

        if time in ["dawn/dusk", "daytime"]:
            time_label = 0
        elif time == "night":
            time_label = 1
        else:
            undefined = True

        if undefined == False:
            names.append(name)
            weather_labels.append(weather_label)
            fog_labels.append(fog_label)
            time_labels.append(time_label)

    return names, time_labels, weather_labels, fog_labels


def load_where_label(data_path: str,
                     names: list,
                     labels: list,
                     label: Union(int, list),
                     labels2: list,
                     label2: Union(int, list),
                     count: int) -> np.ndarray:
    """
    Load images from the bdd dataset where labels = label and labels2 = label

    Example:
        load_where_label('.../100k/', names, weather_labels, [1,0,0], time_lables, 1, 100)
        returns an array of 100 night clear images from the bdd dataset

    Params:
        data_path: source path, ends in 100k/
        names: list of image names generated by load_bdd_labels
        labels: list of labels generated by load_bdd_labels
        label: label to filter labels on
        labels2: list of labels generated by load_bdd_labels
        label2: label to filter labels2 on
        count: number of images to load

    Returns:
        data: array of images
    """

    target_names = [names[i] for i in range(
        len(names)) if labels[i] == label and labels2[i] == label2]
    target_names = target_names[:count]

    result = []

    for name in target_names:
        try:
            image = load_img(os.path.join(data_path, 'train',
                             name), target_size=(224, 224))
        except FileNotFoundError:
            try:
                image = load_img(os.path.join(
                    data_path, 'val', name), target_size=(224, 224))
            except FileNotFoundError:
                image = load_img(os.path.join(
                    data_path, 'test', name), target_size=(224, 224))
        result.append(np.array(image, dtype=np.uint8))

    return np.array(result, dtype=np.uint8)
